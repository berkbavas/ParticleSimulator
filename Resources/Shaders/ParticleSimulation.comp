#version 430 core

layout(local_size_x = 128) in;

layout(std430, binding = 0) buffer InitialPositionBuffer
{
    vec4 initialPositions[];
};

layout(std430, binding = 1) buffer PositionBuffer
{
    vec4 positions[];
};

layout(std430, binding = 2) buffer VelocityBuffer
{
    vec4 velocities[];
};

layout(std430, binding = 3) buffer AttractorBuffer
{
    vec4 attractors[];
};

uniform float dt;
uniform bool applyAttractionForce;
uniform int numberOfAttractors;

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash(uint x)
{
    x += (x << 10u);
    x ^= (x >> 6u);
    x += (x << 3u);
    x ^= (x >> 11u);
    x += (x << 15u);
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash(uvec2 v)
{
    return hash(v.x ^ hash(v.y));
}
uint hash(uvec3 v)
{
    return hash(v.x ^ hash(v.y) ^ hash(v.z));
}
uint hash(uvec4 v)
{
    return hash(v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w));
}

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct(uint m)
{
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne = 0x3F800000u;      // 1.0 in IEEE binary32

    m &= ieeeMantissa; // Keep only mantissa bits (fractional part)
    m |= ieeeOne;      // Add fractional part to 1.0

    float f = uintBitsToFloat(m); // Range [1:2]
    return f - 1.0;               // Range [0:1]
}

// Pseudo-random value in half-open range [0:1].
float random(float x)
{
    return floatConstruct(hash(floatBitsToUint(x)));
}
float random(vec2 v)
{
    return floatConstruct(hash(floatBitsToUint(v)));
}
float random(vec3 v)
{
    return floatConstruct(hash(floatBitsToUint(v)));
}
float random(vec4 v)
{
    return floatConstruct(hash(floatBitsToUint(v)));
}

void main(void)
{
    uint index = gl_GlobalInvocationID.x;

    // Read the current position and velocity from the buffers
    vec3 initialPosition = initialPositions[index].xyz;
    vec3 velocity = velocities[index].xyz;
    vec3 position = positions[index].xyz;

    // Update position using current velocity * time

    if (applyAttractionForce)
    {
        position += velocity * dt;

        for (int i = 0; i < numberOfAttractors; i++)
        {
            // Calculate force and update velocity accordingly
            vec3 delta = attractors[i].xyz - position;
            velocity += dt * dt * normalize(delta) / (dot(delta, delta) + 10.0);
        }
    }
    else
    {
        // Calculate force and update velocity accordingly
        vec3 delta = initialPosition - position;
        velocity = delta / 7.0f;

        position += velocity * dt;

        if (length(delta) < 0.01f)
        {
            position = initialPosition;
            velocity = vec3(0);
        }
    }

    // Store the new position and velocity back into the buffers
    velocities[index] = vec4(velocity, 1);
    positions[index] = vec4(position, 1);
}
